Index: Backend/Bauernschach_Spiel.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from math import inf\r\nfrom anytree import Node, RenderTree\r\n\r\nimport pygame\r\nimport sys\r\n\r\npygame.init()\r\n\r\nclass Position:\r\n\r\n    gameover = False\r\n\r\n    def __init__(self, color, x, y):\r\n        self.color = color\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def fillChildren(self):\r\n        return\r\n    def refreshChildren(self):\r\n        return\r\n\r\n\r\nclass Pawn:\r\n\r\n    currentTurn = \"white\"\r\n\r\n    def __init__(self, color, x, y):\r\n        self.color = color\r\n        self.x = x\r\n        self.y = y\r\n        self.has_moved = False  # Variable, welche angibt, ob der Bauer sich bewegt hat\r\n        self.has_beaten = False  # Variable die angibt, ob geschlagen wurde\r\n\r\n    def draw(self, surface, selected=False):\r\n        radius = 30\r\n        if self.color == \"white\":\r\n            if selected:\r\n                color = (0, 255, 0)  # green if selected\r\n            else:\r\n                color = (255, 255, 255)\r\n        else:\r\n            if selected:\r\n                color = (0, 255, 0)  # green if selected\r\n            else:\r\n                color = (0, 0, 0)\r\n        pygame.draw.circle(surface, color, (self.x * 80 + 40, self.y * 80 + 40), radius)\r\n\r\n# render the board and pawns\r\ndef reRender(sizeX, sizeY, screen):\r\n    board.fill((255, 206, 158))\r\n    for x in range(0, 6, 2):\r\n        for y in range(0, 6, 2):\r\n            rect1 = pygame.draw.rect(board, (210, 180, 140), (x * 80, y * 80, 80, 80))\r\n            rect2 = pygame.draw.rect(board, (210, 180, 140), ((x + 1) * 80, (y + 1) * 80, 80, 80))\r\n\r\n    for pawn in pawns:\r\n        pawn.draw(board, selected=(pawn == selected_pawn))\r\n\r\n        # add the board to the screen\r\n    screen.blit(board, ((sizeX/2)-(480/2), (sizeY/2)-(480/2)))\r\n    pygame.display.flip()\r\n\r\n\r\n# set up the pawns\r\npawns = []\r\nfor i in range(6):\r\n    pawns.append(Pawn(\"black\", i, 0))\r\n    pawns.append(Pawn(\"white\", i, 5))\r\nselected_pawn = None\r\n\r\n# set up the board\r\nsquares = []\r\nboard = pygame.Surface((480, 480))\r\nboard.fill((255, 206, 158))\r\nfor x in range(0, 6, 2):\r\n    for y in range(0, 6, 2):\r\n        rect1 = pygame.draw.rect(board, (210, 180, 140), (x * 80, y * 80, 80, 80))\r\n        rect2 = pygame.draw.rect(board, (210, 180, 140), ((x + 1) * 80, (y + 1) * 80, 80, 80))\r\n        squares.append(rect1)\r\n        squares.append(rect2)\r\n\r\nprint(squares)\r\n\r\nfor pawn in pawns:\r\n    pawn.draw(board, selected=False)  # pass selected flag\r\n    # add the board to the screen\r\n\r\n#Minimax Algorithmus mit Alpha-Beta-Pruning\r\ndef minimax(position, depth, alpha, beta, maximizing_player):\r\n    if depth == 0 or position.gameover:\r\n        return position.evaluation\r\n\r\n    if maximizing_player is True:\r\n        max_eval = float(-inf)\r\n        for child in position:\r\n            eval = minimax(child, depth - 1, alpha, beta, False)\r\n            max_eval = max(max_eval, eval)\r\n            alpha = max(alpha, eval)\r\n            if beta <= alpha:\r\n                break\r\n        return max_eval\r\n    else:\r\n        min_eval = float(inf)\r\n        for child in position:\r\n            eval = minimax(child, depth - 1, alpha, beta, True)\r\n            min_eval = min(min_eval, eval)\r\n            beta = min(beta, eval)\r\n            if beta <= alpha:\r\n                break\r\n        return min_eval\r\n\r\ndef chessGame(sizeX,sizeY,screen, userName, difficulty):\r\n    global selected_pawn, beaten_pawn, pawn_to_beat, last_pos\r\n\r\n    current_turn = \"white\"\r\n    run = True\r\n    last_pos = None\r\n\r\n    screen.fill(\"black\")\r\n    global selected_pawn\r\n    screen.blit(board, ((sizeX/2)-(480/2), (sizeY/2)-(480/2)))\r\n    pygame.display.flip()\r\n\r\n    # the game\r\n    while run is True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                # Speichert die Position des Mouseklicks in der Variable pos\r\n                pos = pygame.mouse.get_pos()\r\n\r\n                # Konvertiert die Positionen in Boardkoordinaten\r\n                x = (pos[0] - 20) // 80\r\n                y = (pos[1] - 20) // 80\r\n\r\n                if selected_pawn is None or (selected_pawn is not None and selected_pawn.color is not current_turn):\r\n                    # Prüft, ob ein Bauer angeklickt wurde\r\n                    for pawn in pawns:\r\n                        if pawn.x == x and pawn.y == y:\r\n                            selected_pawn = pawn\r\n\r\n                            print(pawn)\r\n                            break\r\n\r\n\r\n                    # Prüft, ob ein Bauer angeklickt wurde\r\n                    for pawn in pawns:\r\n                        if pawn.x == x and pawn.y == y:\r\n                            selected_pawn = pawn\r\n\r\n                            print(pawn)\r\n                            break\r\n                    last_pos = pos\r\n            elif event.type == pygame.MOUSEBUTTONUP and selected_pawn is not None and selected_pawn.color is \\\r\n                    current_turn:\r\n                # Speichert die Position des Mouseklicks\r\n                pos = pygame.mouse.get_pos()\r\n\r\n                # Konvertiert die Positionen in Boardkoordinaten\r\n                x = (pos[0] - 20) // 80\r\n                y = (pos[1] - 20) // 80\r\n\r\n                for pawn in pawns:\r\n                    beaten_pawn = False\r\n                    if pawn.x == x and pawn.y == y and pawn.color is not selected_pawn.color:\r\n                        pawn_to_beat = pawn\r\n                        beaten_pawn = True\r\n                        break\r\n\r\n                # Spielfigur bewegen, wenn der Spielzug gültig ist\r\n                if selected_pawn.color == \"white\" and selected_pawn.color == current_turn:\r\n                    if selected_pawn.y == 5 and y == 3 and x == selected_pawn.x and beaten_pawn is False:\r\n                        # Möglichkeit beim ersten Spielzug zwei Felder zu bewegen\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"black\"\r\n                    elif y == selected_pawn.y - 1 and x == selected_pawn.x and beaten_pawn is False:\r\n                        # Ein Spielfeld nach vorne bewegen\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"black\"\r\n                    elif y == selected_pawn.y - 1 and x == selected_pawn.x - 1 and beaten_pawn is True:\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"black\"\r\n                        pawns.remove(pawn_to_beat)\r\n                    elif y == selected_pawn.y - 1 and x == selected_pawn.x + 1 and beaten_pawn is True:\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"black\"\r\n                        pawns.remove(pawn_to_beat)\r\n                elif selected_pawn.color == \"black\" and selected_pawn.color == current_turn:\r\n                    if selected_pawn.y == 0 and y == 2 and x == selected_pawn.x and beaten_pawn is False:\r\n                        # Möglichkeit beim ersten Spielzug zwei Felder zu bewegen\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"white\"\r\n                    elif y == selected_pawn.y + 1 and x == selected_pawn.x and beaten_pawn is False:\r\n                        # Ein Spielfeld nach vorne bewegen\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"white\"\r\n                    elif y == selected_pawn.y + 1 and x == selected_pawn.x - 1 and beaten_pawn is True:\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"white\"\r\n                        pawns.remove(pawn_to_beat)\r\n                    elif y == selected_pawn.y + 1 and x == selected_pawn.x + 1 and beaten_pawn is True:\r\n                        selected_pawn.x = x\r\n                        selected_pawn.y = y\r\n                        current_turn = \"white\"\r\n                        pawns.remove(pawn_to_beat)\r\n                if selected_pawn.color == \"white\" and selected_pawn.y == 0:\r\n                    run = False\r\n                    print(\"Weiß hat gewonnen\")\r\n                elif selected_pawn.color == \"black\" and selected_pawn.y == 5:\r\n                    run = False\r\n                    print(\"Schwarz hat gewonnen\")\r\n                reRender(sizeX, sizeY, screen)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/Bauernschach_Spiel.py b/Backend/Bauernschach_Spiel.py
--- a/Backend/Bauernschach_Spiel.py	(revision db2cdf4416965ca2080b7195208cf20beefeb224)
+++ b/Backend/Bauernschach_Spiel.py	(date 1681892163114)
@@ -5,7 +5,7 @@
 import sys
 
 pygame.init()
-
+print(sys.version)
 class Position:
 
     gameover = False
Index: Backend/Game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame, sys, pygame_gui\r\nfrom classes.button import Button\r\nfrom Bauernschach_Spiel import *\r\nfrom difficulty import *\r\nfrom queries.getAllsorted import getAllSortedByTurns\r\nfrom queries.createUser import *\r\n\r\n\r\n\r\npygame.init()\r\n\r\n#defining font size and get font element\r\ndef font(size): \r\n    return pygame.font.Font(\"resources/mainFont.ttf\", size)\r\n    \r\n# set up the window\r\nsizeX = 520*1.7\r\nsizeY = 520*1.3\r\n\r\nsize = (sizeX, sizeY)\r\nscreen = pygame.display.set_mode(size)\r\npygame.display.set_caption(\"Chess Game\")\r\nbackgroundIMG = pygame.image.load(\"resources/hideinpain.png\")\r\nbackground = pygame.transform.scale(backgroundIMG,(sizeX, sizeY))\r\nmanager = pygame_gui.UIManager((sizeX, sizeY))\r\n\r\n\r\n\r\ndef mainMenu(sizeX,sizeY, screen, userName):\r\n    pygame.display.set_caption(\"Menü\")\r\n\r\n    while True:\r\n        screen.blit(background, (0, 0))\r\n\r\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        MENU_TEXT = font(100).render(\"MAIN MENU\", True, \"#000000\")\r\n        MENU_RECT = MENU_TEXT.get_rect(center=(sizeX/2, 60))\r\n\r\n\r\n        playChessButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/4, 250), \r\n                            text_input=\"SCHACH\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        playToeButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=((sizeX/4)*3, 250), \r\n                            text_input=\"TICTACTOE\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        showRanking = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/2, 400), \r\n                            text_input=\"RANKING\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        quitButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/2, 550), \r\n                            text_input=\"VERLASSEN\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n\r\n        screen.blit(MENU_TEXT, MENU_RECT)\r\n\r\n        for button in [playChessButton, playToeButton, showRanking, quitButton]:\r\n            button.changeColor(MENU_MOUSE_POS)\r\n            button.update(screen)\r\n        \r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if playChessButton.checkForInput(MENU_MOUSE_POS):\r\n                    difficulty(sizeX, sizeY, screen, userName, \"chess\")\r\n                if playToeButton.checkForInput(MENU_MOUSE_POS):\r\n                    difficulty(sizeX, sizeY, screen, userName, \"ttt\")\r\n                if showRanking.checkForInput(MENU_MOUSE_POS):\r\n                    showRankingF()\r\n                if quitButton.checkForInput(MENU_MOUSE_POS):\r\n                    pygame.quit()\r\n                    sys.exit()\r\n\r\n        pygame.display.update()\r\n\r\ndef showRankingF():\r\n    pygame.display.set_caption(\"Ranking\")\r\n    testest = getAllSortedByTurns()\r\n    for row in testest:\r\n        print(\"name\", row[1], row[3])\r\n\r\n    while True:\r\n        OPTIONS_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        screen.fill(\"white\")\r\n\r\n        OPTIONS_TEXT = font(45).render(\"This is the OPTIONS screen.\", True, \"Black\")\r\n        OPTIONS_RECT = OPTIONS_TEXT.get_rect(center=(640, 260))\r\n        screen.blit(OPTIONS_TEXT, OPTIONS_RECT)\r\n\r\n        OPTIONS_BACK = Button(image=None, pos=(640, 460), \r\n                            text_input=\"BACK\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n\r\n        OPTIONS_BACK.changeColor(OPTIONS_MOUSE_POS)\r\n        OPTIONS_BACK.update(screen)\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if OPTIONS_BACK.checkForInput(OPTIONS_MOUSE_POS):\r\n                    mainMenu()\r\n\r\n        pygame.display.update()\r\n\r\ndef startPage(sizeX, sizeY, screen):\r\n    pygame.display.set_caption(\"Welcome\")\r\n    clock = pygame.time.Clock()\r\n    while True:\r\n        screen.blit(background, (0, 0))\r\n\r\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        MENU_TEXT = font(100).render(\"Welcome\", True, \"#000000\")\r\n        MENU_RECT = MENU_TEXT.get_rect(center=(sizeX/2, 60))\r\n\r\n        registerButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/4, sizeY/2), \r\n                            text_input=\"Registieren\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        loginButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=((sizeX/4)*3, sizeY/2), \r\n                            text_input=\"Login\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        screen.blit(MENU_TEXT, MENU_RECT)\r\n\r\n        for button in [registerButton, loginButton]:\r\n            button.changeColor(MENU_MOUSE_POS)\r\n            button.update(screen)\r\n        \r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                if registerButton.checkForInput(MENU_MOUSE_POS):\r\n                    register(sizeX, sizeY, screen)\r\n                if loginButton.checkForInput(MENU_MOUSE_POS):\r\n                    login(sizeX, sizeY, screen)\r\n        pygame.display.update()\r\n\r\ndef register(sizeX, sizeY, screen):\r\n    pygame.display.set_caption(\"REGISTIEREN\")\r\n    clock = pygame.time.Clock()\r\n\r\n    #u wanna know then go read the doc https://pygame-gui.readthedocs.io/en/latest/pygame_gui.elements.html?highlight=pygame_gui.elements.UIButton#pygame_gui.elements.UIButton\r\n    text_input = pygame_gui.elements.UITextEntryLine(relative_rect=pygame.Rect((sizeX/4, sizeY/3), (sizeX/2, 50)), manager=manager,\r\n                                                object_id='#main_text_entry')\r\n    submitButton = pygame_gui.elements.UIButton(relative_rect=pygame.Rect((sizeX/4, sizeY/2), (sizeX/2, 100)), text = \"SUBMIT\",  manager=manager,\r\n                                                object_id='#main_button_entry')\r\n    backButton = pygame_gui.elements.UIButton(relative_rect=pygame.Rect(((sizeX/1.2)-20, sizeY/1.12), (sizeX/6, 50)), text = \"BACK\",  manager=manager,\r\n                                                object_id='#backButton')\r\n    error_msg = None # initialize error message to None\r\n\r\n    while True:\r\n\r\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        UI_REFRESH_RATE = clock.tick(60)/1000\r\n\r\n        MENU_TEXT = font(100).render(\"REGISTIEREN\", True, \"#000000\")\r\n        MENU_RECT = MENU_TEXT.get_rect(center=(sizeX/2, 60))\r\n\r\n        USERNAME_TEXT = font(30).render(\"USERNAME:\", True, \"#355E3B\")\r\n        USERNAME_RECT = MENU_TEXT.get_rect(center=(sizeX/1.5, (sizeY/3)+20))\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n                \r\n            if (event.type == pygame_gui.UI_TEXT_ENTRY_CHANGED and\r\n                event.ui_object_id == '#main_text_entry'):\r\n                 userName = event.text\r\n\r\n            if(event.type == pygame_gui.UI_BUTTON_PRESSED and event.ui_object_id == '#main_button_entry'):\r\n                try:\r\n                    createUserQuery(userName)\r\n                    text_input.kill()\r\n                    startPage(sizeX, sizeY, screen)\r\n                except Exception as e:\r\n                    error_msg = str(e) # set error message to the exception string\r\n                    print(error_msg) # print error message to console\r\n            \r\n            if(event.type == pygame_gui.UI_BUTTON_PRESSED and event.ui_object_id == '#backButton'):\r\n                    text_input.kill()\r\n                    startPage(sizeX, sizeY, screen)\r\n  \r\n                \r\n            manager.process_events(event)\r\n        \r\n        manager.update(UI_REFRESH_RATE)\r\n\r\n        screen.blit(background, (0, 0))\r\n        screen.blit(MENU_TEXT, MENU_RECT)\r\n        screen.blit(USERNAME_TEXT, USERNAME_RECT)\r\n\r\n        if error_msg: # if error message exists, display it on the screen\r\n            ERROR_TEXT = font(20).render(error_msg, True, \"#FF0000\")\r\n            ERROR_RECT = ERROR_TEXT.get_rect(center=(sizeX/2.8, (sizeY/3)+70))\r\n            screen.blit(ERROR_TEXT, ERROR_RECT)\r\n        \r\n\r\n        manager.draw_ui(screen)\r\n\r\n        pygame.display.update()\r\n\r\n\r\ndef login(sizeX, sizeY, screen):\r\n    pygame.display.set_caption(\"LOGIN\")\r\n    clock = pygame.time.Clock()\r\n\r\n    #u wanna know then go read the doc https://pygame-gui.readthedocs.io/en/latest/pygame_gui.elements.html?highlight=pygame_gui.elements.UIButton#pygame_gui.elements.UIButton\r\n    text_input = pygame_gui.elements.UITextEntryLine(relative_rect=pygame.Rect((sizeX/4, sizeY/3), (sizeX/2, 50)), manager=manager,\r\n                                                object_id='#main_text_entry')\r\n    submitButton = pygame_gui.elements.UIButton(relative_rect=pygame.Rect((sizeX/4, sizeY/2), (sizeX/2, 100)), text = \"LOGIN\",  manager=manager,\r\n                                                object_id='#main_button_entry')\r\n    backButton = pygame_gui.elements.UIButton(relative_rect=pygame.Rect(((sizeX/1.2)-20, sizeY/1.12), (sizeX/6, 50)), text = \"BACK\",  manager=manager,\r\n                                                object_id='#backButton')\r\n    error_msg = None # initialize error message to None\r\n\r\n    while True:\r\n        screen.blit(background, (0, 0))\r\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        UI_REFRESH_RATE = clock.tick(60)/1000\r\n\r\n        MENU_TEXT = font(100).render(\"LOGIN\", True, \"#000000\")\r\n        MENU_RECT = MENU_TEXT.get_rect(center=(sizeX/2, 60))\r\n\r\n        USERNAME_TEXT = font(30).render(\"USERNAME:\", True, \"#355E3B\")\r\n        USERNAME_RECT = MENU_TEXT.get_rect(center=(sizeX/2.25, (sizeY/3)+20))\r\n\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n                \r\n            if (event.type == pygame_gui.UI_TEXT_ENTRY_CHANGED and\r\n                event.ui_object_id == '#main_text_entry'):\r\n                 userName = event.text\r\n\r\n            if(event.type == pygame_gui.UI_BUTTON_PRESSED and event.ui_object_id == '#main_button_entry'):\r\n                try:\r\n                    checkingExistingUser(userName)\r\n                    mainMenu(sizeX, sizeY, screen, userName)\r\n                except Exception as e:\r\n                    error_msg = str(e) # set error message to the exception string\r\n                    print(error_msg) # print error message to console\r\n            \r\n            if(event.type == pygame_gui.UI_BUTTON_PRESSED and event.ui_object_id == '#backButton'):\r\n                    text_input.kill()\r\n                    startPage(sizeX, sizeY, screen)\r\n  \r\n                \r\n            manager.process_events(event)\r\n        \r\n        manager.update(UI_REFRESH_RATE)\r\n\r\n        screen.blit(background, (0, 0))\r\n        screen.blit(MENU_TEXT, MENU_RECT)\r\n        screen.blit(USERNAME_TEXT, USERNAME_RECT)\r\n\r\n        if error_msg: # if error message exists, display it on the screen\r\n            ERROR_TEXT = font(20).render(error_msg, True, \"#FF0000\")\r\n            ERROR_RECT = ERROR_TEXT.get_rect(center=(sizeX/2.8, (sizeY/3)+70))\r\n            screen.blit(ERROR_TEXT, ERROR_RECT)\r\n        \r\n\r\n        manager.draw_ui(screen)\r\n\r\n        pygame.display.update()\r\n\r\n\r\n\r\nstartPage(sizeX, sizeY, screen)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/Game.py b/Backend/Game.py
--- a/Backend/Game.py	(revision db2cdf4416965ca2080b7195208cf20beefeb224)
+++ b/Backend/Game.py	(date 1681899358318)
@@ -1,4 +1,6 @@
-import pygame, sys, pygame_gui
+import pygame
+import sys
+import pygame_gui
 from classes.button import Button
 from Bauernschach_Spiel import *
 from difficulty import *
@@ -21,11 +23,9 @@
 screen = pygame.display.set_mode(size)
 pygame.display.set_caption("Chess Game")
 backgroundIMG = pygame.image.load("resources/hideinpain.png")
-background = pygame.transform.scale(backgroundIMG,(sizeX, sizeY))
+background = pygame.transform.scale(backgroundIMG, (sizeX, sizeY))
 manager = pygame_gui.UIManager((sizeX, sizeY))
 
-
-
 def mainMenu(sizeX,sizeY, screen, userName):
     pygame.display.set_caption("Menü")
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f2baf0e4-a2ae-4c29-8316-e85e5ad6a870\" name=\"Changes\" comment=\"Login Seite\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NSWYP72UQRzYksz8mSWK3a8qip\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/recin/Documents/GitHub/devshhbk&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\recin\\Documents\\GitHub\\devshhbk\\Backend\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"Tic_Tac_Toe_Spiel\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"devshhbk\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Backend\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Backend/Tic_Tac_Toe_Spiel.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"__init__\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"devshhbk\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/DB\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/DB/__init__.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"devshhbk\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.__init__\" />\r\n        <item itemvalue=\"Python.Tic_Tac_Toe_Spiel\" />\r\n        <item itemvalue=\"Python.Tic_Tac_Toe_Spiel\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f2baf0e4-a2ae-4c29-8316-e85e5ad6a870\" name=\"Changes\" comment=\"\" />\r\n      <created>1679658011105</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679658011105</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"keine ahnung\">\r\n      <created>1680169680304</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680169680304</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"verschiebung code bauernschach\">\r\n      <created>1680169719176</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1680169719176</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Login Seite\">\r\n      <created>1681813905753</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681813905753</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Login Seite\">\r\n      <created>1681815599165</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681815599165</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"keine ahnung\" />\r\n    <MESSAGE value=\"verschiebung code bauernschach\" />\r\n    <MESSAGE value=\"Login Seite\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Login Seite\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision db2cdf4416965ca2080b7195208cf20beefeb224)
+++ b/.idea/workspace.xml	(date 1681899473122)
@@ -1,8 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="f2baf0e4-a2ae-4c29-8316-e85e5ad6a870" name="Changes" comment="Login Seite">
+    <list default="true" id="f2baf0e4-a2ae-4c29-8316-e85e5ad6a870" name="Changes" comment="zwischenstand mit values">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Backend/Bauernschach_Spiel.py" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Bauernschach_Spiel.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Backend/Game.py" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/Game.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Backend/difficulty.py" beforeDir="false" afterPath="$PROJECT_DIR$/Backend/difficulty.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DB/StrategiespieleDB.db" beforeDir="false" afterPath="$PROJECT_DIR$/DB/StrategiespieleDB.db" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -19,7 +23,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="dv" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -32,20 +36,62 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/recin/Documents/GitHub/devshhbk&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "last_opened_file_path": "C:/Users/recin/Documents/GitHub/devshhbk",
+    "settings.editor.selected.configurable": "preferences.keymap"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\recin\Documents\GitHub\devshhbk\Backend" />
     </key>
   </component>
-  <component name="RunManager" selected="Python.main">
+  <component name="RunManager" selected="Python.Game">
+    <configuration name="Bauernschach_Spiel" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="devshhbk" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Backend" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Backend/Bauernschach_Spiel.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+    <configuration name="Game" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="devshhbk" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/Backend" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/Backend/Game.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <configuration name="Tic_Tac_Toe_Spiel" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="devshhbk" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -111,6 +157,8 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Python.Game" />
+        <item itemvalue="Python.Bauernschach_Spiel" />
         <item itemvalue="Python.__init__" />
         <item itemvalue="Python.Tic_Tac_Toe_Spiel" />
         <item itemvalue="Python.Tic_Tac_Toe_Spiel" />
@@ -174,4 +222,15 @@
     <MESSAGE value="Login Seite" />
     <option name="LAST_COMMIT_MESSAGE" value="Login Seite" />
   </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" suspend="THREAD" type="python-line">
+          <url>file://$PROJECT_DIR$/Backend/difficulty.py</url>
+          <line>3</line>
+          <option name="timeStamp" value="1" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
+  </component>
 </project>
\ No newline at end of file
Index: Backend/difficulty.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame, sys, pygame_gui\r\nfrom classes.button import Button\r\nfrom Bauernschach_Spiel import *\r\n\r\n#defining font size and get font element\r\ndef font(size): \r\n    return pygame.font.Font(\"resources/mainFont.ttf\", size)\r\n\r\n\r\ndef difficulty(sizeX,sizeY, screen, userName, gameType):\r\n    pygame.display.set_caption(\"difficulty\")\r\n    backgroundIMG = pygame.image.load(\"resources/hideinpain.png\")\r\n    background = pygame.transform.scale(backgroundIMG,(sizeX, sizeY))\r\n    while True:\r\n        screen.blit(background, (0, 0))\r\n\r\n        MENU_MOUSE_POS = pygame.mouse.get_pos()\r\n\r\n        MENU_TEXT = font(100).render(\"DIFFICULTY\", True, \"#000000\")\r\n        MENU_RECT = MENU_TEXT.get_rect(center=(sizeX/2, 60))\r\n\r\n\r\n        easyButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/2, sizeY/3), \r\n                            text_input=\"easy\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        mediumButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/2, (sizeY/3)+150), \r\n                            text_input=\"madium\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        hardButton = Button(image=pygame.image.load(\"resources/test.png\"), pos=(sizeX/2, (sizeY/3) +300), \r\n                            text_input=\"hard\", font=font(40), base_color=\"#d7fcd4\", hovering_color=\"Yellow\")\r\n        \r\n        screen.blit(MENU_TEXT, MENU_RECT)\r\n\r\n        for button in [easyButton, mediumButton, hardButton]:\r\n            button.changeColor(MENU_MOUSE_POS)\r\n            button.update(screen)\r\n        \r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                sys.exit()\r\n            if gameType == \"chess\":\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                    if easyButton.checkForInput(MENU_MOUSE_POS):\r\n                        print(\"chesas\")\r\n                        chessGame(sizeX, sizeY, screen, userName, 1)\r\n                    if mediumButton.checkForInput(MENU_MOUSE_POS):\r\n                        chessGame(sizeX, sizeY, screen, userName, 2)\r\n                    if hardButton.checkForInput(MENU_MOUSE_POS):\r\n                        chessGame(sizeX, sizeY, screen, userName,3)\r\n            if gameType == \"ttt\":\r\n                if event.type == pygame.MOUSEBUTTONDOWN:\r\n                        if easyButton.checkForInput(MENU_MOUSE_POS):\r\n                            print(\"ttt\")\r\n                            chessGame(sizeX, sizeY, screen, userName, 1)\r\n                        if mediumButton.checkForInput(MENU_MOUSE_POS):\r\n                            chessGame(sizeX, sizeY, screen, userName, 2)\r\n                        if hardButton.checkForInput(MENU_MOUSE_POS):\r\n                            chessGame(sizeX, sizeY, screen, userName,3)\r\n  \r\n\r\n        pygame.display.update()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/difficulty.py b/Backend/difficulty.py
--- a/Backend/difficulty.py	(revision db2cdf4416965ca2080b7195208cf20beefeb224)
+++ b/Backend/difficulty.py	(date 1681892051458)
@@ -1,4 +1,6 @@
-import pygame, sys, pygame_gui
+import pygame
+import sys
+import pygame_gui
 from classes.button import Button
 from Bauernschach_Spiel import *
 
